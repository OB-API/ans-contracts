{
  "address": "0xDC36D2676f08F3395ad03DDEC5f9413fc6585C73",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ensAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_biddingStarts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_biddingEnds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_revealEnds",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "labelHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "label",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AuctionFinalised",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "BidPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "labelHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "label",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BidRevealed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_LABEL_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_BID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_LABEL_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "auction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "secondBid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beneficiary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "biddingEnds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "biddingStarts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "bids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        }
      ],
      "name": "computeBidHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ens",
      "outputs": [
        {
          "internalType": "contract ENS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "label",
          "type": "string"
        }
      ],
      "name": "finaliseAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundsAvailable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "labelOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "bidHash",
          "type": "bytes32"
        }
      ],
      "name": "placeBid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "label",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        }
      ],
      "name": "revealBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revealEnds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe4adbbcb3ffda594ea3d2181b24dcaa91242724f38bda8d919342f4e38e8bd49",
  "receipt": {
    "to": null,
    "from": "0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC",
    "contractAddress": "0xDC36D2676f08F3395ad03DDEC5f9413fc6585C73",
    "transactionIndex": 0,
    "gasUsed": "1016650",
    "logsBloom": "0x
    "blockHash": "0xe3464056a87fe6d9b59dfab2db6bb871a1d227af21e6e83905865cda9f3549d1",
    "transactionHash": "0xe4adbbcb3ffda594ea3d2181b24dcaa91242724f38bda8d919342f4e38e8bd49",
    "logs": [],
    "blockNumber": 3595,
    "cumulativeGasUsed": "1016650",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7bb5dF7e9cd087fe1dB68f27e546268632E99654",
    1639301531,
    1639301981,
    1639302001,
    "0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC"
  ],
  "solcInputHash": "fe8d5dde69c29fb2503482082759b379",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ensAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_biddingStarts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_biddingEnds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_revealEnds\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"labelHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AuctionFinalised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"labelHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BidRevealed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_LABEL_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_LABEL_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"auction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondBid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"biddingEnds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"biddingStarts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"computeBidHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"finaliseAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundsAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"labelOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"bidHash\",\"type\":\"bytes32\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"revealBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealEnds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/auctions/NameAuction.sol\":\"NameAuction\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/auctions/NameAuction.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport '../registry/ENS.sol';\\n\\ncontract NameAuction {\\n\\n    ENS public ens;\\n\\n    struct Auction {\\n        uint maxBid;\\n        uint secondBid;\\n        address winner;\\n    }\\n\\n    uint public constant MIN_BID = 0.01 ether;\\n    uint public constant MIN_LABEL_LENGTH = 3;\\n    uint public constant MAX_LABEL_LENGTH = 6;\\n\\n    address public owner;\\n    address public beneficiary;\\n\\n    uint public biddingStarts;\\n    uint public biddingEnds;\\n    uint public revealEnds;\\n    uint public fundsAvailable;\\n\\n    mapping(bytes32=>uint) public bids;\\n    mapping(string=>Auction) auctions;\\n    mapping(string=>address) labels;\\n\\n    event BidPlaced(address indexed bidder, uint amount, bytes32 hash);\\n    event BidRevealed(address indexed bidder, bytes32 indexed labelHash, string label, uint amount);\\n    event AuctionFinalised(address indexed winner, bytes32 indexed labelHash, string label, uint amount);\\n\\n    constructor(address ensAddress, uint _biddingStarts, uint _biddingEnds, uint _revealEnds, address _beneficiary) public {\\n        // require(_biddingStarts >= block.timestamp);\\n        // require(_biddingEnds > _biddingStarts);\\n        // require(_revealEnds > _biddingEnds);\\n        // require(_beneficiary != address(0));\\n\\n        ens = ENS(ensAddress);\\n        ens.setAuctioner();\\n        owner = msg.sender;\\n        biddingStarts = _biddingStarts;\\n        biddingEnds = _biddingEnds;\\n        revealEnds = _revealEnds;\\n        beneficiary = _beneficiary;\\n    }\\n\\n    function placeBid(bytes32 bidHash) external payable {\\n        require(block.timestamp >= biddingStarts && block.timestamp < biddingEnds);\\n\\n        require(msg.value >= MIN_BID);\\n        require(bids[bidHash] == 0);\\n        bids[bidHash] = msg.value;\\n        emit BidPlaced(msg.sender, msg.value, bidHash);\\n    }\\n\\n    function revealBid(address bidder, string memory label, bytes32 secret) external {\\n        require(block.timestamp >= biddingEnds && block.timestamp < revealEnds);\\n\\n        bytes32 bidHash = computeBidHash(bidder, label, secret);\\n        uint bidAmount = bids[bidHash];\\n        bids[bidHash] = 0;\\n        require(bidAmount > 0);\\n\\n        // Immediately refund bids on invalid labels.\\n        uint labelLen = strlen(label);\\n        if(labelLen < MIN_LABEL_LENGTH || labelLen > MAX_LABEL_LENGTH) {\\n            payable(bidder).transfer(bidAmount);\\n            return;\\n        }\\n\\n        emit BidRevealed(bidder, keccak256(abi.encodePacked(label)), label, bidAmount);\\n\\n        Auction storage a = auctions[label];\\n        if(bidAmount > a.maxBid) {\\n            // New winner!\\n            if(a.winner != address(0)) {\\n                // Ignore failed sends - bad luck for them.\\n                payable(a.winner).send(a.maxBid);\\n            }\\n            a.secondBid = a.maxBid;\\n            a.maxBid = bidAmount;\\n            a.winner = bidder;\\n        } else if(bidAmount > a.secondBid) {\\n            // New second bidder\\n            a.secondBid = bidAmount;\\n            payable(bidder).transfer(bidAmount);\\n        } else {\\n            // No effect on the auction\\n            payable(bidder).transfer(bidAmount);\\n        }\\n    }\\n\\n    function finaliseAuction(string memory label) external {\\n        require(block.timestamp >= revealEnds);\\n\\n        Auction storage auction = auctions[label];\\n        require(auction.winner != address(0));\\n\\n        uint winPrice = auction.secondBid;\\n        if(winPrice == 0) {\\n            winPrice = MIN_BID;\\n        }\\n        if(winPrice < auction.maxBid) {\\n            // Ignore failed sends\\n            payable(auction.winner).send(auction.maxBid - winPrice);\\n        }\\n        fundsAvailable += winPrice;\\n\\n        emit AuctionFinalised(auction.winner, keccak256(abi.encodePacked(label)), label, winPrice);\\n\\n        labels[label] = auction.winner;\\n        delete auctions[label];\\n    }\\n\\n    function withdraw() external {\\n        require(msg.sender == owner);\\n        payable(msg.sender).transfer(fundsAvailable);\\n        fundsAvailable = 0;\\n    }\\n\\n    function auction(string memory name) external view returns(uint maxBid, uint secondBid, address winner) {\\n        Auction storage a = auctions[name];\\n        return (a.maxBid, a.secondBid, a.winner);\\n    }\\n\\n    function labelOwner(string memory name) external view returns(address) {\\n        return labels[name];\\n    }\\n\\n    function computeBidHash(address bidder, string memory name, bytes32 secret) public pure returns(bytes32) {\\n        return keccak256(abi.encodePacked(bidder, name, secret));\\n    }\\n\\n    /**\\n     * @dev Returns the length of a given string\\n     *\\n     * @param s The string to measure the length of\\n     * @return The length of the input string\\n     */\\n    function strlen(string memory s) internal pure returns (uint) {\\n        s; // Don't warn about unused variables\\n        // Starting here means the LSB will be the byte we care about\\n        uint ptr;\\n        uint end;\\n        assembly {\\n            ptr := add(s, 1)\\n            end := add(mload(s), ptr)\\n        }\\n        uint len = 0;\\n        for (len = 0; ptr < end; len++) {\\n            uint8 b;\\n            assembly { b := and(mload(ptr), 0xFF) }\\n            if (b < 0x80) {\\n                ptr += 1;\\n            } else if (b < 0xE0) {\\n                ptr += 2;\\n            } else if (b < 0xF0) {\\n                ptr += 3;\\n            } else if (b < 0xF8) {\\n                ptr += 4;\\n            } else if (b < 0xFC) {\\n                ptr += 5;\\n            } else {\\n                ptr += 6;\\n            }\\n        }\\n        return len;\\n    }\\n}\",\"keccak256\":\"0x786483d408131a1880e5172d7db3bc8a5f17ad166b76016387d8d1af5eb24d2b\"},\"contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external virtual returns(bytes32);\\n    function setResolver(bytes32 node, address resolver) external virtual;\\n    function setOwner(bytes32 node, address owner) external virtual;\\n    function setTTL(bytes32 node, uint64 ttl) external virtual;\\n    function setApprovalForAll(address operator, bool approved) external virtual;\\n    function owner(bytes32 node) external virtual view returns (address);\\n    function resolver(bytes32 node) external virtual view returns (address);\\n    function ttl(bytes32 node) external virtual view returns (uint64);\\n    function recordExists(bytes32 node) external virtual view returns (bool);\\n    function isApprovedForAll(address owner, address operator) external virtual view returns (bool);\\n    function setAuctioner() external virtual;\\n    function setTldRecord(bytes32 tld, address owner) external virtual; \\n}\\n\",\"keccak256\":\"0xd294fa7fae8c50aab33053c0b82cad57f656181f19574e85cf7da565ff980699\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101295760003560e01c806366ed0900116100a5578063ce69cd2011610074578063e1be48ac11610059578063e1be48ac14610321578063ebbfccb714610341578063fcdfdd3d1461036157600080fd5b8063ce69cd20146102f1578063dd4984cb1461030c57600080fd5b806366ed0900146102575780638da5cb5b146102775780638f98eeda146102a4578063b7673e6b146102d157600080fd5b80633f15457f116100fc578063497ecfc5116100e1578063497ecfc5146102195780634fe0bd1e1461022c5780636464e58f1461024257600080fd5b80633f15457f146101d6578063495d18e21461020357600080fd5b8063308dc2cf1461012e57806333eab89c1461015757806338af3eed1461016d5780633ccfd60b146101bf575b600080fd5b34801561013a57600080fd5b5061014460035481565b6040519081526020015b60405180910390f35b34801561016357600080fd5b5061014460045481565b34801561017957600080fd5b5060025461019a9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161014e565b3480156101cb57600080fd5b506101d46103b2565b005b3480156101e257600080fd5b5060005461019a9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561020f57600080fd5b5061014460055481565b6101d4610227366004610c3d565b61040c565b34801561023857600080fd5b5061014460065481565b34801561024e57600080fd5b50610144600681565b34801561026357600080fd5b50610144610272366004610bce565b6104a7565b34801561028357600080fd5b5060015461019a9073ffffffffffffffffffffffffffffffffffffffff1681565b3480156102b057600080fd5b506101446102bf366004610c3d565b60076020526000908152604090205481565b3480156102dd57600080fd5b506101d46102ec366004610c55565b6104dd565b3480156102fd57600080fd5b50610144662386f26fc1000081565b34801561031857600080fd5b50610144600381565b34801561032d57600080fd5b5061019a61033c366004610c55565b610727565b34801561034d57600080fd5b506101d461035c366004610bce565b610765565b34801561036d57600080fd5b5061038161037c366004610c55565b610a14565b60408051938452602084019290925273ffffffffffffffffffffffffffffffffffffffff169082015260600161014e565b60015473ffffffffffffffffffffffffffffffffffffffff1633146103d657600080fd5b600654604051339180156108fc02916000818181858888f19350505050158015610404573d6000803e3d6000fd5b506000600655565b600354421015801561041f575060045442105b61042857600080fd5b662386f26fc1000034101561043c57600080fd5b6000818152600760205260409020541561045557600080fd5b6000818152600760209081526040918290203490819055825190815290810183905233917f7688c47abe05d00c4c928b2463ce78311682f000513dde54988eca2d6b01072f910160405180910390a250565b60008383836040516020016104be93929190610c88565b6040516020818303038152906040528051906020012090509392505050565b6005544210156104ec57600080fd5b60006008826040516104fe9190610cda565b908152604051908190036020019020600281015490915073ffffffffffffffffffffffffffffffffffffffff1661053457600080fd5b6001810154806105485750662386f26fc100005b8154811015610598576002820154825473ffffffffffffffffffffffffffffffffffffffff909116906108fc90610580908490610d67565b6040518115909202916000818181858888f150505050505b80600660008282546105aa9190610d4f565b90915550506040516105c0908490602001610cda565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529082905280516020909101206002840154909173ffffffffffffffffffffffffffffffffffffffff909116907fae0bfb3801f05d987c13279f1191c4194aff02fc346c379f2d47c8f34761fe1b906106469087908690610cf6565b60405180910390a3600282015460405173ffffffffffffffffffffffffffffffffffffffff9091169060099061067d908690610cda565b908152604051908190036020018120805473ffffffffffffffffffffffffffffffffffffffff939093167fffffffffffffffffffffffff0000000000000000000000000000000000000000909316929092179091556008906106e0908590610cda565b9081526040519081900360200190206000808255600182015560020180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055505050565b60006009826040516107399190610cda565b9081526040519081900360200190205473ffffffffffffffffffffffffffffffffffffffff1692915050565b6004544210158015610778575060055442105b61078157600080fd5b600061078e8484846104a7565b60008181526007602052604081208054919055909150806107ae57600080fd5b60006107b985610a6c565b905060038110806107ca5750600681115b1561081b5760405173ffffffffffffffffffffffffffffffffffffffff87169083156108fc029084906000818181858888f19350505050158015610812573d6000803e3d6000fd5b50505050505050565b8460405160200161082c9190610cda565b604051602081830303815290604052805190602001208673ffffffffffffffffffffffffffffffffffffffff167f982d3ccbfe3991ecfdff5e6595005e4fa9af7f4a1e97639b3f7690eef264263b878560405161088a929190610cf6565b60405180910390a360006008866040516108a49190610cda565b90815260200160405180910390209050806000015483111561096b57600281015473ffffffffffffffffffffffffffffffffffffffff161561091a576002810154815460405173ffffffffffffffffffffffffffffffffffffffff9092169181156108fc0291906000818181858888f150505050505b805460018201558281556002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8916179055610812565b80600101548311156109c7576001810183905560405173ffffffffffffffffffffffffffffffffffffffff88169084156108fc029085906000818181858888f193505050501580156109c1573d6000803e3d6000fd5b50610812565b60405173ffffffffffffffffffffffffffffffffffffffff88169084156108fc029085906000818181858888f19350505050158015610a0a573d6000803e3d6000fd5b5050505050505050565b600080600080600885604051610a2a9190610cda565b9081526040519081900360200190208054600182015460029092015490955090935073ffffffffffffffffffffffffffffffffffffffff169150509193909250565b8051600090600183810191840101825b81831015610b2157825160ff166080811015610aa457610a9d600185610d4f565b9350610b0e565b60e08160ff161015610abb57610a9d600285610d4f565b60f08160ff161015610ad257610a9d600385610d4f565b60f88160ff161015610ae957610a9d600485610d4f565b60fc8160ff161015610b0057610a9d600585610d4f565b610b0b600685610d4f565b93505b5080610b1981610dae565b915050610a7c565b949350505050565b600082601f830112610b39578081fd5b813567ffffffffffffffff80821115610b5457610b54610e16565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610b9a57610b9a610e16565b81604052838152866020858801011115610bb2578485fd5b8360208701602083013792830160200193909352509392505050565b600080600060608486031215610be2578283fd5b833573ffffffffffffffffffffffffffffffffffffffff81168114610c05578384fd5b9250602084013567ffffffffffffffff811115610c20578283fd5b610c2c86828701610b29565b925050604084013590509250925092565b600060208284031215610c4e578081fd5b5035919050565b600060208284031215610c66578081fd5b813567ffffffffffffffff811115610c7c578182fd5b610b2184828501610b29565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008460601b16815260008351610cc5816014850160208801610d7e565b60149201918201929092526034019392505050565b60008251610cec818460208701610d7e565b9190910192915050565b6040815260008351806040840152610d15816060850160208801610d7e565b602083019390935250601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601606001919050565b60008219821115610d6257610d62610de7565b500190565b600082821015610d7957610d79610de7565b500390565b60005b83811015610d99578181015183820152602001610d81565b83811115610da8576000848401525b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610de057610de0610de7565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea2646970667358221220ec2b1a7babcd0014f488c2956ef6bc07cb19b7551d5a49390db5cda83e3704ca64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2360,
        "contract": "contracts/auctions/NameAuction.sol:NameAuction",
        "label": "ens",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ENS)12658"
      },
      {
        "astId": 2378,
        "contract": "contracts/auctions/NameAuction.sol:NameAuction",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2380,
        "contract": "contracts/auctions/NameAuction.sol:NameAuction",
        "label": "beneficiary",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2382,
        "contract": "contracts/auctions/NameAuction.sol:NameAuction",
        "label": "biddingStarts",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2384,
        "contract": "contracts/auctions/NameAuction.sol:NameAuction",
        "label": "biddingEnds",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2386,
        "contract": "contracts/auctions/NameAuction.sol:NameAuction",
        "label": "revealEnds",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2388,
        "contract": "contracts/auctions/NameAuction.sol:NameAuction",
        "label": "fundsAvailable",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2392,
        "contract": "contracts/auctions/NameAuction.sol:NameAuction",
        "label": "bids",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 2397,
        "contract": "contracts/auctions/NameAuction.sol:NameAuction",
        "label": "auctions",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Auction)2367_storage)"
      },
      {
        "astId": 2401,
        "contract": "contracts/auctions/NameAuction.sol:NameAuction",
        "label": "labels",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ENS)12658": {
        "encoding": "inplace",
        "label": "contract ENS",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Auction)2367_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct NameAuction.Auction)",
        "numberOfBytes": "32",
        "value": "t_struct(Auction)2367_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Auction)2367_storage": {
        "encoding": "inplace",
        "label": "struct NameAuction.Auction",
        "members": [
          {
            "astId": 2362,
            "contract": "contracts/auctions/NameAuction.sol:NameAuction",
            "label": "maxBid",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2364,
            "contract": "contracts/auctions/NameAuction.sol:NameAuction",
            "label": "secondBid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2366,
            "contract": "contracts/auctions/NameAuction.sol:NameAuction",
            "label": "winner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}