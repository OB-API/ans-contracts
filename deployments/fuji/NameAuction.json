{
  "address": "0xd94240aDE8Ff97B1b9Df4500a0EF571e44951d13",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ensAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_biddingStarts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_biddingEnds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_revealEnds",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "labelHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "label",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AuctionFinalised",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "BidPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "labelHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "label",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BidRevealed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_LABEL_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_BID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_LABEL_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        }
      ],
      "name": "auction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "secondBid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beneficiary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "biddingEnds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "biddingStarts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "bids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_bytes32",
          "type": "bytes32"
        }
      ],
      "name": "bytes32ToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        }
      ],
      "name": "computeBidHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ens",
      "outputs": [
        {
          "internalType": "contract ENS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        }
      ],
      "name": "finaliseAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundsAvailable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        }
      ],
      "name": "labelOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "bidHash",
          "type": "bytes32"
        }
      ],
      "name": "placeBid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        }
      ],
      "name": "revealBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revealEnds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfb7e8799f62ecd2f2352c4b4658de82bf217caa44b25dfdf91099eefb6c0211d",
  "receipt": {
    "to": null,
    "from": "0xA55d58E13A7f452554151bab5BD6c75d0b8dd831",
    "contractAddress": "0xd94240aDE8Ff97B1b9Df4500a0EF571e44951d13",
    "transactionIndex": 0,
    "gasUsed": "1090953",
    "logsBloom": "0x
    "blockHash": "0xfabebf7db97b5cabfd735eac955a1f7cdb778ba7799efd4ba5ef00b2d6e76835",
    "transactionHash": "0xfb7e8799f62ecd2f2352c4b4658de82bf217caa44b25dfdf91099eefb6c0211d",
    "logs": [],
    "blockNumber": 3428343,
    "cumulativeGasUsed": "1090953",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x29c5Ae48E270872a8181Eb6ae382E9916A2D76C2",
    1639301531,
    1639301981,
    1639302001,
    "0xA55d58E13A7f452554151bab5BD6c75d0b8dd831"
  ],
  "solcInputHash": "7ae7997aa3fba493360896296fc34c86",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ensAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_biddingStarts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_biddingEnds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_revealEnds\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"labelHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AuctionFinalised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"labelHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BidRevealed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_LABEL_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_LABEL_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"auction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondBid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"biddingEnds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"biddingStarts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_bytes32\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"computeBidHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"finaliseAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundsAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"labelOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"bidHash\",\"type\":\"bytes32\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"revealBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealEnds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Todo change the string to bytes32\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/auctions/NameAuction.sol\":\"NameAuction\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/auctions/NameAuction.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport '../registry/ENS.sol';\\n\\n/// Todo change the string to bytes32\\n// Next steps , check the hashRegistrar and passing the test cases, write the test cases, \\n// \\n\\ncontract NameAuction {\\n\\n    ENS public ens;\\n\\n    struct Auction {\\n        uint maxBid;\\n        uint secondBid;\\n        address winner;\\n    }\\n\\n    uint public constant MIN_BID = 0.01 ether;\\n    uint public constant MIN_LABEL_LENGTH = 3;\\n    uint public constant MAX_LABEL_LENGTH = 6;\\n\\n    address public owner;\\n    address public beneficiary;\\n\\n    uint public biddingStarts;\\n    uint public biddingEnds;\\n    uint public revealEnds;\\n    uint public fundsAvailable;\\n\\n    mapping(bytes32=>uint) public bids;\\n    mapping(bytes32=>Auction) auctions;\\n    mapping(bytes32=>address) labels;\\n\\n    event BidPlaced(address indexed bidder, uint amount, bytes32 hash);\\n    event BidRevealed(address indexed bidder, bytes32 indexed labelHash, string label, uint amount);\\n    event AuctionFinalised(address indexed winner, bytes32 indexed labelHash, string label, uint amount);\\n\\n    constructor(address ensAddress, uint _biddingStarts, uint _biddingEnds, uint _revealEnds, address _beneficiary) public {\\n        // require(_biddingStarts >= block.timestamp);\\n        // require(_biddingEnds > _biddingStarts);\\n        // require(_revealEnds > _biddingEnds);\\n        // require(_beneficiary != address(0));\\n\\n        ens = ENS(ensAddress);\\n        ens.setAuctioner();\\n        owner = msg.sender;\\n        biddingStarts = _biddingStarts;\\n        biddingEnds = _biddingEnds;\\n        revealEnds = _revealEnds;\\n        beneficiary = _beneficiary;\\n    }\\n\\n    function bytes32ToString(bytes32 _bytes32) public pure returns (string memory) {\\n        uint8 i = 0;\\n        while(i < 32 && _bytes32[i] != 0) {\\n            i++;\\n        }\\n        bytes memory bytesArray = new bytes(i);\\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\\n            bytesArray[i] = _bytes32[i];\\n        }\\n        return string(bytesArray);\\n    }\\n\\n    function placeBid(bytes32 bidHash) external payable {\\n        require(block.timestamp >= biddingStarts && block.timestamp < biddingEnds);\\n\\n        require(msg.value >= MIN_BID);\\n        require(bids[bidHash] == 0);\\n        bids[bidHash] = msg.value;\\n        emit BidPlaced(msg.sender, msg.value, bidHash);\\n    }\\n\\n    function revealBid(address bidder, bytes32 label, bytes32 secret) external {\\n        require(block.timestamp >= biddingEnds && block.timestamp < revealEnds);\\n\\n        bytes32 bidHash = computeBidHash(bidder, label, secret);\\n        uint bidAmount = bids[bidHash];\\n        bids[bidHash] = 0;\\n        require(bidAmount > 0);\\n\\n        // Immediately refund bids on invalid labels.\\n        uint labelLen = strlen(label);\\n        if(labelLen < MIN_LABEL_LENGTH || labelLen > MAX_LABEL_LENGTH) {\\n            payable(bidder).transfer(bidAmount);\\n            return;\\n        }\\n\\n        emit BidRevealed(bidder, keccak256(abi.encodePacked(label)), bytes32ToString(label), bidAmount);\\n\\n        Auction storage a = auctions[label];\\n        if(bidAmount > a.maxBid) {\\n            // New winner!\\n            if(a.winner != address(0)) {\\n                // Ignore failed sends - bad luck for them.\\n                payable(a.winner).send(a.maxBid);\\n            }\\n            a.secondBid = a.maxBid;\\n            a.maxBid = bidAmount;\\n            a.winner = bidder;\\n        } else if(bidAmount > a.secondBid) {\\n            // New second bidder\\n            a.secondBid = bidAmount;\\n            payable(bidder).transfer(bidAmount);\\n        } else {\\n            // No effect on the auction\\n            payable(bidder).transfer(bidAmount);\\n        }\\n    }\\n\\n    function finaliseAuction(bytes32 label) external {\\n        require(block.timestamp >= revealEnds);\\n\\n        Auction storage auction = auctions[label];\\n        require(auction.winner != address(0));\\n\\n        uint winPrice = auction.secondBid;\\n        if(winPrice == 0) {\\n            winPrice = MIN_BID;\\n        }\\n        if(winPrice < auction.maxBid) {\\n            // Ignore failed sends\\n            payable(auction.winner).send(auction.maxBid - winPrice);\\n        }\\n        fundsAvailable += winPrice;\\n        ens.setTldRecord(label, auction.winner);\\n        emit AuctionFinalised(auction.winner, keccak256(abi.encodePacked(label)), bytes32ToString(label), winPrice);\\n\\n        labels[label] = auction.winner;\\n        delete auctions[label];\\n    }\\n\\n    function withdraw() external {\\n        require(msg.sender == owner);\\n        payable(msg.sender).transfer(fundsAvailable);\\n        fundsAvailable = 0;\\n    }\\n\\n    function auction(bytes32 name) external view returns(uint maxBid, uint secondBid, address winner) {\\n        Auction storage a = auctions[name];\\n        return (a.maxBid, a.secondBid, a.winner);\\n    }\\n\\n    function labelOwner(bytes32 name) external view returns(address) {\\n        return labels[name];\\n    }\\n\\n    function computeBidHash(address bidder, bytes32 name, bytes32 secret) public pure returns(bytes32) {\\n        return keccak256(abi.encodePacked(bidder, name, secret));\\n    }\\n\\n    /**\\n     * @dev Returns the length of a given string\\n     *\\n     * @param s The string to measure the length of\\n     * @return The length of the input string\\n     */\\n    function strlen(bytes32 s) internal pure returns (uint) {\\n        s; // Don't warn about unused variables\\n        // Starting here means the LSB will be the byte we care about\\n        uint ptr;\\n        uint end;\\n        assembly {\\n            ptr := add(s, 1)\\n            end := add(mload(s), ptr)\\n        }\\n        uint len = 0;\\n        for (len = 0; ptr < end; len++) {\\n            uint8 b;\\n            assembly { b := and(mload(ptr), 0xFF) }\\n            if (b < 0x80) {\\n                ptr += 1;\\n            } else if (b < 0xE0) {\\n                ptr += 2;\\n            } else if (b < 0xF0) {\\n                ptr += 3;\\n            } else if (b < 0xF8) {\\n                ptr += 4;\\n            } else if (b < 0xFC) {\\n                ptr += 5;\\n            } else {\\n                ptr += 6;\\n            }\\n        }\\n        return len;\\n    }\\n}\",\"keccak256\":\"0x2a793eb4bb41b26b67ef81acc7102be4e0d1ab4ee8fdfde6807962f309df3916\"},\"contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external virtual returns(bytes32);\\n    function setResolver(bytes32 node, address resolver) external virtual;\\n    function setOwner(bytes32 node, address owner) external virtual;\\n    function setTTL(bytes32 node, uint64 ttl) external virtual;\\n    function setApprovalForAll(address operator, bool approved) external virtual;\\n    function owner(bytes32 node) external virtual view returns (address);\\n    function resolver(bytes32 node) external virtual view returns (address);\\n    function ttl(bytes32 node) external virtual view returns (uint64);\\n    function recordExists(bytes32 node) external virtual view returns (bool);\\n    function isApprovedForAll(address owner, address operator) external virtual view returns (bool);\\n    function setAuctioner() external virtual;\\n    function setTldRecord(bytes32 tld, address owner) external virtual; \\n}\\n\",\"keccak256\":\"0xd294fa7fae8c50aab33053c0b82cad57f656181f19574e85cf7da565ff980699\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161112e38038061112e83398101604081905261002f916100f2565b600080546001600160a01b0319166001600160a01b038716908117825560408051633a541bbb60e11b8152905191926374a837769260048084019382900301818387803b15801561007f57600080fd5b505af1158015610093573d6000803e3d6000fd5b505060018054336001600160a01b0319918216179091556003969096555050600492909255600555600280549092166001600160a01b0390911617905550610141565b80516001600160a01b03811681146100ed57600080fd5b919050565b600080600080600060a08688031215610109578081fd5b610112866100d6565b9450602086015193506040860151925060608601519150610135608087016100d6565b90509295509295909350565b610fde806101506000396000f3fe6080604052600436106101445760003560e01c80636464e58f116100c0578063b7cd214411610074578063ce69cd2011610059578063ce69cd201461045d578063dd4984cb14610478578063fdde67f21461048d57600080fd5b8063b7cd2144146103c0578063c7fc8afa146103e057600080fd5b80638da5cb5b116100a55780638da5cb5b146103395780638f98eeda146103665780639201de551461039357600080fd5b80636464e58f146102a0578063715ede94146102b557600080fd5b80633ccfd60b11610117578063495d18e2116100fc578063495d18e214610261578063497ecfc5146102775780634fe0bd1e1461028a57600080fd5b80633ccfd60b1461021d5780633f15457f1461023457600080fd5b806323227a5614610149578063308dc2cf146101b657806333eab89c146101da57806338af3eed146101f0575b600080fd5b34801561015557600080fd5b5061018c610164366004610e3b565b60009081526009602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b3480156101c257600080fd5b506101cc60035481565b6040519081526020016101ad565b3480156101e657600080fd5b506101cc60045481565b3480156101fc57600080fd5b5060025461018c9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561022957600080fd5b506102326104ad565b005b34801561024057600080fd5b5060005461018c9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561026d57600080fd5b506101cc60055481565b610232610285366004610e3b565b610507565b34801561029657600080fd5b506101cc60065481565b3480156102ac57600080fd5b506101cc600681565b3480156102c157600080fd5b506103086102d0366004610e3b565b600090815260086020526040902080546001820154600290920154909273ffffffffffffffffffffffffffffffffffffffff90911690565b60408051938452602084019290925273ffffffffffffffffffffffffffffffffffffffff16908201526060016101ad565b34801561034557600080fd5b5060015461018c9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561037257600080fd5b506101cc610381366004610e3b565b60076020526000908152604090205481565b34801561039f57600080fd5b506103b36103ae366004610e3b565b6105a2565b6040516101ad9190610ebc565b3480156103cc57600080fd5b506102326103db366004610e3b565b6107e4565b3480156103ec57600080fd5b506101cc6103fb366004610def565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606085901b16602082015260348101839052605481018290526000906074016040516020818303038152906040528051906020012090509392505050565b34801561046957600080fd5b506101cc662386f26fc1000081565b34801561048457600080fd5b506101cc600381565b34801561049957600080fd5b506102326104a8366004610def565b610a4b565b60015473ffffffffffffffffffffffffffffffffffffffff1633146104d157600080fd5b600654604051339180156108fc02916000818181858888f193505050501580156104ff573d6000803e3d6000fd5b506000600655565b600354421015801561051a575060045442105b61052357600080fd5b662386f26fc1000034101561053757600080fd5b6000818152600760205260409020541561055057600080fd5b6000818152600760209081526040918290203490819055825190815290810183905233917f7688c47abe05d00c4c928b2463ce78311682f000513dde54988eca2d6b01072f910160405180910390a250565b606060005b60208160ff1610801561061a5750828160ff16602081106105f1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b7fff000000000000000000000000000000000000000000000000000000000000001615155b15610631578061062981610f59565b9150506105a7565b60008160ff1667ffffffffffffffff811115610676577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156106a0576020820181803683370190505b509050600091505b60208260ff1610801561071b5750838260ff16602081106106f2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b7fff000000000000000000000000000000000000000000000000000000000000001615155b156107dd57838260ff166020811061075c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b818360ff168151811061079c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350816107d581610f59565b9250506106a8565b9392505050565b6005544210156107f357600080fd5b6000818152600860205260409020600281015473ffffffffffffffffffffffffffffffffffffffff1661082557600080fd5b6001810154806108395750662386f26fc100005b8154811015610889576002820154825473ffffffffffffffffffffffffffffffffffffffff909116906108fc90610871908490610f09565b6040518115909202916000818181858888f150505050505b806006600082825461089b9190610ef1565b909155505060005460028301546040517f60aa6d340000000000000000000000000000000000000000000000000000000081526004810186905273ffffffffffffffffffffffffffffffffffffffff91821660248201529116906360aa6d3490604401600060405180830381600087803b15801561091857600080fd5b505af115801561092c573d6000803e3d6000fd5b505050508260405160200161094391815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602090910120600283015473ffffffffffffffffffffffffffffffffffffffff167fae0bfb3801f05d987c13279f1191c4194aff02fc346c379f2d47c8f34761fe1b6109be866105a2565b846040516109cd929190610ecf565b60405180910390a3506002908101546000928352600960209081526040808520805473ffffffffffffffffffffffffffffffffffffffff9094167fffffffffffffffffffffffff0000000000000000000000000000000000000000948516179055600890915283208381556001810193909355910180549091169055565b6004544210158015610a5e575060055442105b610a6757600080fd5b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b16602080830191909152603482018590526054808301859052835180840390910181526074909201835281519181019190912060008181526007909252918120805491905580610ae057600080fd5b6000610aeb85610d32565b90506003811080610afc5750600681115b15610b4d5760405173ffffffffffffffffffffffffffffffffffffffff87169083156108fc029084906000818181858888f19350505050158015610b44573d6000803e3d6000fd5b50505050505050565b604080516020810187905201604051602081830303815290604052805190602001208673ffffffffffffffffffffffffffffffffffffffff167f982d3ccbfe3991ecfdff5e6595005e4fa9af7f4a1e97639b3f7690eef264263b610bb0886105a2565b85604051610bbf929190610ecf565b60405180910390a360008581526008602052604090208054831115610c8957600281015473ffffffffffffffffffffffffffffffffffffffff1615610c38576002810154815460405173ffffffffffffffffffffffffffffffffffffffff9092169181156108fc0291906000818181858888f150505050505b805460018201558281556002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8916179055610b44565b8060010154831115610ce5576001810183905560405173ffffffffffffffffffffffffffffffffffffffff88169084156108fc029085906000818181858888f19350505050158015610cdf573d6000803e3d6000fd5b50610b44565b60405173ffffffffffffffffffffffffffffffffffffffff88169084156108fc029085906000818181858888f19350505050158015610d28573d6000803e3d6000fd5b5050505050505050565b8051600090600183810191840101825b81831015610de757825160ff166080811015610d6a57610d63600185610ef1565b9350610dd4565b60e08160ff161015610d8157610d63600285610ef1565b60f08160ff161015610d9857610d63600385610ef1565b60f88160ff161015610daf57610d63600485610ef1565b60fc8160ff161015610dc657610d63600585610ef1565b610dd1600685610ef1565b93505b5080610ddf81610f20565b915050610d42565b949350505050565b600080600060608486031215610e03578283fd5b833573ffffffffffffffffffffffffffffffffffffffff81168114610e26578384fd5b95602085013595506040909401359392505050565b600060208284031215610e4c578081fd5b5035919050565b60008151808452815b81811015610e7857602081850181015186830182015201610e5c565b81811115610e895782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006107dd6020830184610e53565b604081526000610ee26040830185610e53565b90508260208301529392505050565b60008219821115610f0457610f04610f79565b500190565b600082821015610f1b57610f1b610f79565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f5257610f52610f79565b5060010190565b600060ff821660ff811415610f7057610f70610f79565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea26469706673582212208411f61afcc26b70b3272dad783cdbaecfa62cd5ff378c831b8bd8d3ae803b7364736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101445760003560e01c80636464e58f116100c0578063b7cd214411610074578063ce69cd2011610059578063ce69cd201461045d578063dd4984cb14610478578063fdde67f21461048d57600080fd5b8063b7cd2144146103c0578063c7fc8afa146103e057600080fd5b80638da5cb5b116100a55780638da5cb5b146103395780638f98eeda146103665780639201de551461039357600080fd5b80636464e58f146102a0578063715ede94146102b557600080fd5b80633ccfd60b11610117578063495d18e2116100fc578063495d18e214610261578063497ecfc5146102775780634fe0bd1e1461028a57600080fd5b80633ccfd60b1461021d5780633f15457f1461023457600080fd5b806323227a5614610149578063308dc2cf146101b657806333eab89c146101da57806338af3eed146101f0575b600080fd5b34801561015557600080fd5b5061018c610164366004610e3b565b60009081526009602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b3480156101c257600080fd5b506101cc60035481565b6040519081526020016101ad565b3480156101e657600080fd5b506101cc60045481565b3480156101fc57600080fd5b5060025461018c9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561022957600080fd5b506102326104ad565b005b34801561024057600080fd5b5060005461018c9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561026d57600080fd5b506101cc60055481565b610232610285366004610e3b565b610507565b34801561029657600080fd5b506101cc60065481565b3480156102ac57600080fd5b506101cc600681565b3480156102c157600080fd5b506103086102d0366004610e3b565b600090815260086020526040902080546001820154600290920154909273ffffffffffffffffffffffffffffffffffffffff90911690565b60408051938452602084019290925273ffffffffffffffffffffffffffffffffffffffff16908201526060016101ad565b34801561034557600080fd5b5060015461018c9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561037257600080fd5b506101cc610381366004610e3b565b60076020526000908152604090205481565b34801561039f57600080fd5b506103b36103ae366004610e3b565b6105a2565b6040516101ad9190610ebc565b3480156103cc57600080fd5b506102326103db366004610e3b565b6107e4565b3480156103ec57600080fd5b506101cc6103fb366004610def565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606085901b16602082015260348101839052605481018290526000906074016040516020818303038152906040528051906020012090509392505050565b34801561046957600080fd5b506101cc662386f26fc1000081565b34801561048457600080fd5b506101cc600381565b34801561049957600080fd5b506102326104a8366004610def565b610a4b565b60015473ffffffffffffffffffffffffffffffffffffffff1633146104d157600080fd5b600654604051339180156108fc02916000818181858888f193505050501580156104ff573d6000803e3d6000fd5b506000600655565b600354421015801561051a575060045442105b61052357600080fd5b662386f26fc1000034101561053757600080fd5b6000818152600760205260409020541561055057600080fd5b6000818152600760209081526040918290203490819055825190815290810183905233917f7688c47abe05d00c4c928b2463ce78311682f000513dde54988eca2d6b01072f910160405180910390a250565b606060005b60208160ff1610801561061a5750828160ff16602081106105f1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b7fff000000000000000000000000000000000000000000000000000000000000001615155b15610631578061062981610f59565b9150506105a7565b60008160ff1667ffffffffffffffff811115610676577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156106a0576020820181803683370190505b509050600091505b60208260ff1610801561071b5750838260ff16602081106106f2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b7fff000000000000000000000000000000000000000000000000000000000000001615155b156107dd57838260ff166020811061075c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b818360ff168151811061079c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350816107d581610f59565b9250506106a8565b9392505050565b6005544210156107f357600080fd5b6000818152600860205260409020600281015473ffffffffffffffffffffffffffffffffffffffff1661082557600080fd5b6001810154806108395750662386f26fc100005b8154811015610889576002820154825473ffffffffffffffffffffffffffffffffffffffff909116906108fc90610871908490610f09565b6040518115909202916000818181858888f150505050505b806006600082825461089b9190610ef1565b909155505060005460028301546040517f60aa6d340000000000000000000000000000000000000000000000000000000081526004810186905273ffffffffffffffffffffffffffffffffffffffff91821660248201529116906360aa6d3490604401600060405180830381600087803b15801561091857600080fd5b505af115801561092c573d6000803e3d6000fd5b505050508260405160200161094391815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602090910120600283015473ffffffffffffffffffffffffffffffffffffffff167fae0bfb3801f05d987c13279f1191c4194aff02fc346c379f2d47c8f34761fe1b6109be866105a2565b846040516109cd929190610ecf565b60405180910390a3506002908101546000928352600960209081526040808520805473ffffffffffffffffffffffffffffffffffffffff9094167fffffffffffffffffffffffff0000000000000000000000000000000000000000948516179055600890915283208381556001810193909355910180549091169055565b6004544210158015610a5e575060055442105b610a6757600080fd5b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b16602080830191909152603482018590526054808301859052835180840390910181526074909201835281519181019190912060008181526007909252918120805491905580610ae057600080fd5b6000610aeb85610d32565b90506003811080610afc5750600681115b15610b4d5760405173ffffffffffffffffffffffffffffffffffffffff87169083156108fc029084906000818181858888f19350505050158015610b44573d6000803e3d6000fd5b50505050505050565b604080516020810187905201604051602081830303815290604052805190602001208673ffffffffffffffffffffffffffffffffffffffff167f982d3ccbfe3991ecfdff5e6595005e4fa9af7f4a1e97639b3f7690eef264263b610bb0886105a2565b85604051610bbf929190610ecf565b60405180910390a360008581526008602052604090208054831115610c8957600281015473ffffffffffffffffffffffffffffffffffffffff1615610c38576002810154815460405173ffffffffffffffffffffffffffffffffffffffff9092169181156108fc0291906000818181858888f150505050505b805460018201558281556002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8916179055610b44565b8060010154831115610ce5576001810183905560405173ffffffffffffffffffffffffffffffffffffffff88169084156108fc029085906000818181858888f19350505050158015610cdf573d6000803e3d6000fd5b50610b44565b60405173ffffffffffffffffffffffffffffffffffffffff88169084156108fc029085906000818181858888f19350505050158015610d28573d6000803e3d6000fd5b5050505050505050565b8051600090600183810191840101825b81831015610de757825160ff166080811015610d6a57610d63600185610ef1565b9350610dd4565b60e08160ff161015610d8157610d63600285610ef1565b60f08160ff161015610d9857610d63600385610ef1565b60f88160ff161015610daf57610d63600485610ef1565b60fc8160ff161015610dc657610d63600585610ef1565b610dd1600685610ef1565b93505b5080610ddf81610f20565b915050610d42565b949350505050565b600080600060608486031215610e03578283fd5b833573ffffffffffffffffffffffffffffffffffffffff81168114610e26578384fd5b95602085013595506040909401359392505050565b600060208284031215610e4c578081fd5b5035919050565b60008151808452815b81811015610e7857602081850181015186830182015201610e5c565b81811115610e895782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006107dd6020830184610e53565b604081526000610ee26040830185610e53565b90508260208301529392505050565b60008219821115610f0457610f04610f79565b500190565b600082821015610f1b57610f1b610f79565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f5257610f52610f79565b5060010190565b600060ff821660ff811415610f7057610f70610f79565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea26469706673582212208411f61afcc26b70b3272dad783cdbaecfa62cd5ff378c831b8bd8d3ae803b7364736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Todo change the string to bytes32",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2361,
        "contract": "contracts/auctions/NameAuction.sol:NameAuction",
        "label": "ens",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ENS)12735"
      },
      {
        "astId": 2379,
        "contract": "contracts/auctions/NameAuction.sol:NameAuction",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2381,
        "contract": "contracts/auctions/NameAuction.sol:NameAuction",
        "label": "beneficiary",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2383,
        "contract": "contracts/auctions/NameAuction.sol:NameAuction",
        "label": "biddingStarts",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2385,
        "contract": "contracts/auctions/NameAuction.sol:NameAuction",
        "label": "biddingEnds",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2387,
        "contract": "contracts/auctions/NameAuction.sol:NameAuction",
        "label": "revealEnds",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2389,
        "contract": "contracts/auctions/NameAuction.sol:NameAuction",
        "label": "fundsAvailable",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2393,
        "contract": "contracts/auctions/NameAuction.sol:NameAuction",
        "label": "bids",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 2398,
        "contract": "contracts/auctions/NameAuction.sol:NameAuction",
        "label": "auctions",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_struct(Auction)2368_storage)"
      },
      {
        "astId": 2402,
        "contract": "contracts/auctions/NameAuction.sol:NameAuction",
        "label": "labels",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ENS)12735": {
        "encoding": "inplace",
        "label": "contract ENS",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_struct(Auction)2368_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct NameAuction.Auction)",
        "numberOfBytes": "32",
        "value": "t_struct(Auction)2368_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Auction)2368_storage": {
        "encoding": "inplace",
        "label": "struct NameAuction.Auction",
        "members": [
          {
            "astId": 2363,
            "contract": "contracts/auctions/NameAuction.sol:NameAuction",
            "label": "maxBid",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2365,
            "contract": "contracts/auctions/NameAuction.sol:NameAuction",
            "label": "secondBid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2367,
            "contract": "contracts/auctions/NameAuction.sol:NameAuction",
            "label": "winner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}